#!/bin/bash
#set -x

# === globals ===
TRACE=0
UTILS_PRJ_HOME=$(dirname ${BASH_SOURCE[0]})
UTILS_PRJ_CONFIGS=`eval echo ~/.utils-prj` # fix '~' bug
UTILS_PRJ_THE_HOST=$(uname -n)
UTILS_PRJ_THE_OS=$(uname -s)
UTILS_PRJ_INCLUDE="utils-prj-include"
UTILS_PRJ_ALIASES="utils-prj-aliases"
UTILS_PRJ_SED_BACKUP="''"
case "$UTILS_PRJ_THE_OS" in
	MINGW*)
		UTILS_PRJ_SED_BACKUP="" #|MSYS*
		;;
  esac

alias trace_prj='[ "$TRACE" == "1" ] && echo -e '

# === TODO ===

	# todo: oldpwd for *nix (~/.oldpwd for msys only)
	# correct cmd_edit_host_config
	# ?? rename list to set in helps
	# cmd_add_project(){ $3 - home_path
	# verbose to TRACE
	# empty params -> help
	# plist add help header
	# get_find_path
	# local looped and other
	# избавиться от APPS_ROOT (проставлять при setup)
	# ругаться если dir:utils-prj not found || "$UTILS_PRJ_HOME/lib-prj" not found || "$HOME/.utils-prj/utils-prj-aliases" not found
	# version
	# pstatex - show all remotes/ all branches
	# common func for error msg (red  !  func_name <norm>)
	# pst -> psta[x]
	# pstate -> pst[x]
	# add to prj file - credential.helper line (ex =wincred,  =credential.helper osxkeychain, =gnome-keyring) and when pgo replace it in .git/config
	# padd - deny if file exist
	# когда статус - show branch/remote
	# pst[x] если .|.. не передано -> проверять что передан list | prj  и prj совпадает с листом -> /<list> -> list
	# может проще сделать внутри <prj> - <host1>=<path1>\n <host2>=<path2> или в имени?
	# .gitignore в папку хоста чтобы не коммитить его в репо
	#cmd_move_set() {		# psetmove	<host>

	# (cut <CR>) when read from configs (prj/list)

	# add binds  Ctrl+Shift ??
	# detect project if home path is superfolder for current 

	# keys(options)
		# в каждую команду --help -h -? -verbose (trace)

	# вынести add prj to set в func - проверять что его там нет 
	# default переделать на $DEFAULT="~default"
	# psaveall <list1>,<list2>
	# instead get_curtent_set - add verify_set
	# psave .. = psaveall
	# psave ... = save all lists
	# psave - log what committed

	# plist pshow psets - use notice if no found
	# add support comment for cfg (prj/list)
	# add 'cfg' extension for prj/list files?
	# dyna gif help w/ref impl for another my prj (eg. utils-vcs)
	# cmd_project_delete +from_list
	# psetren <not_current> <onother_name>

	# ... - all sets
	# 'set/prj' syntax

	# support named params style: -v -h -n: -p: -l:(-s?) -m:"" 
	# -n=<prj> -p=<path> -t=<type> -r=<remote> -l(s?)=<list(set?)>
	#while :
	#do
	#    case "$1" in
	#    -h|--help) ;;
	#    -*) echo "invalid argument $1";;
	#    *) break;;
	#    esac
	#    shift
	#done

	# prj - opt: switch to branch (ex v2.0)
		# todo: add matrix of using cmd_<utils-git>
	# when cmd_<utils-git> absent - show not found msg and prompt how to install

	# how add to repo 4 install by installer (brew apt-get)
	# prj type: rsync  svn  simple(compare size / timestamp)

	# add beta satus, version & lic info
	# reference impl : clone setup psetadd cd padd plist cd- pgo touch pstate pstx pget psave psync pcmd (reset) ...
		# how todo remote commit (w/o push)

# === release notes ===
	# тильда в переменной для указания в пути домашней папки- крэшит команды (cd, ls ..)
		# workaround: eval - http://stackoverflow.com/questions/11065077/eval-command-in-bash-and-its-typical-uses 
		# re="~(.*)"; if [[ $path =~ $re ]]; then  path=${BASH_REMATCH[1]}; fi; cd $HOME$path
	# if you want edit lib-prj and then TRACE it, you can use next cmd: pupd; TRACE=1; <cmd>; TRACE=0
	#	note: alias chages didn't took effect if you run cmd in one command line (throuhg ';'). Run 'pupd' and next command ('TRACE=1; <cmd>; TRACE=0') lunch after prompt

# === install ===
utils-prj-setup(){
	# обновляем файлы если уже есть
	[ ! -d ~/.utils-git ] && echo "to run commands on git repos required utils-git"
	[ ! -d ~/.utils-env ] && echo "to get messages in colored manner required utils-env"

	[ ! -d "$UTILS_PRJ_CONFIGS" ] && mkdir "$UTILS_PRJ_CONFIGS"
	[ ! -f "UTILS_PRJ_CONFIGS/$utils_include" ] && 	copy "$UTILS_PRJ_HOME/$UTILS_PRJ_INCLUDE" "UTILS_PRJ_CONFIGS/$UTILS_PRJ_INCLUDE"
	# sed REPLACE path in 'export HOME_UTILS_PRJ= ex to "/C/app/utils-prj"
	[ ! -f "UTILS_PRJ_CONFIGS/$UTILS_PRJ_ALIASES" ] && copy "$UTILS_PRJ_HOME/$UTILS_PRJ_ALIASES" "UTILS_PRJ_CONFIGS/$UTILS_PRJ_ALIASES"
	# sed UTILS_PRJ_HOME in 'include' # to include lib to shell and some commands (ex. pel, p-help)
	local bash_profile=`eval echo ~/.bash_profile` # fix ~ bug
	touch "$bash_profile"
	# [ if not found '. ~/.utils-prj/include ] && echo '. ~/.utils-prj/include' >> .bash_profile
	# echo "add to PATH?" read  [] echo "export PATH=$PATH:$UTILS_PRJ_HOME" >> $utils_include
	mkdir "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"
	[ ! -f "UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/default" ] && copy "$UTILS_PRJ_HOME/default" "UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/default"
	touch "UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/!projects"
	echo "'p-help' - print readme.adoc"
	echo "'pshow' - print current configuration (config files, project sets with projects)"
	echo "'padd my_alias' - add alias and current folder to projects list (at start - 'default')"
	echo "'plist' - review assigned aliases"
	echo "'pgo my_alias' - cmd_project_go home"
	echo "'pfix my_alias' - save project at local repository"
	echo "'psave my_alias' - save project and sync with remote repository"
	echo "'pget my_alias' - pull project from remote repository"
	}
utils-prj-uninstall(){
	# cut '. ~/.utils-prj/include' from .bash_profile
	rm "UTILS_PRJ_CONFIGS/$UTILS_PRJ_INCLUDE"
	rm "UTILS_PRJ_CONFIGS/$UTILS_PRJ_ALIASES"
	# echo remove host aliases also ?; read; 
		# rm -r -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"
		# cd "UTILS_PRJ_CONFIGS/.."
		# rm "UTILS_PRJ_CONFIGS"
	cd "$UTILS_PRJ_HOME"/..
	rm "$UTILS_PRJ_HOME"
	}

# config functions ======================
cmd_show_current_config(){	# pshow
	cmd_project_enum
	#echo -e "Current set:\t$(get_current_set)"
	#echo -e "Current project:\t$(get_project_name "$(pwd)")
		# version
	# папка home
	# папка config
	# path with host's configs (files: aliases , include /PATH/ )
	# p-help 
	# psets (one lined style)
	}
cmd_project_enum(){		# plist		[<list>]
	# plist <list>
	# echo UTILS_PRJ_THE_HOST: $UTILS_PRJ_THE_HOST
	local prj_list="$1"
	local current_set=$(get_current_set)
	[ "$prj_list" == "" ] && prj_list="$current_set"
	trace_prj "prj_list:\t\t$prj_list"
	local current_project=$(get_project_name "$(pwd)")
	trace_prj "current_project:\t$current_project"

	[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list" ] && echo -e "${red}[cmd_project_enum] Project list '$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list' not found !${norm}" && return
	if [ "$current_set" == "$prj_list" ]; then
		echo -e "\n${black_on_green}  ${red_on_green}$prj_list ${magenta_on_green}(current)  ${norm}"
	  else
		echo -e "\n${black_on_green}  ${red_on_green}$prj_list  ${norm}"
	  fi

	for prj_name in $(cat $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list | sed -e /^$/d | tr -d '\r' | sort); do 
		#prj_name=`eval echo $prj_name` # normalize (<CR> ~)
		local path=`sed -E -n 's/^path=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
		if [ "$current_project" == "$prj_name" ]; then
			echo -e "${green}$prj_name${norm}\t${green}$path ${grey}(current)${norm}"
		  else
			echo -e "$prj_name\t$path"
		  fi
	  done
	echo
	}
cmd_project_add(){		# padd		<prj> 		[<list>]
	# cmd_add_project -n=<prj> -p=<path> -t=<type> -r=<remote> -s=<set>
	local prj_name=$1
	local prj_list=$2

	[[ "$prj_name" == "" ]] && echo -e "${red}[cmd_project_add] prj_name param is missed !${norm}" && return 
	local curr_path="${PWD/#$HOME/~}"; trace_prj "cur_path:\t$curr_path"
	
	# TODO: detect repo type (git/svn/hg - .git foder / .svn folder? / ..)
	# TODO: return when curr_path not repo
	# TODO: test prj_name in list
	# TODO: detect tail CR and don't append \n
	# TODO: if file exists but absent in default list then add

	#trace_prj "home:\t\t$UTILS_PRJ_HOME"; trace_prj "UTILS_PRJ_THE_HOST:\t\t$UTILS_PRJ_THE_HOST"

	if [[ "$prj_list" == "" ]]; then
		prj_list_default=$(get_current_set); trace_prj "default_list:\t$prj_list_default"
		[ "$prj_list_default" == "" ] && echo -e "${red}[cmd_project_add] prj_list_default not found !${norm}" && return
		prj_list="$prj_list_default.list"
	  else
	  	prj_list="$prj_list.list"
	  fi; trace_prj "prj_list:\t$prj_list"
		
	prj_file="$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name"; trace_prj "prj_file:\t$prj_file"
	[[ -f $prj_file ]] && echo -e "${red}[cmd_project_add] Project already exists${norm}" && return

	echo "path=$curr_path" 	> $prj_file
	echo "type=git" 	>> $prj_file
	echo "remote=" 		>> $prj_file

	echo -e "$prj_name" >> "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list" # ? test to exists?
	echo -e "[cmd_project_add] Project ${green}$prj_name - $curr_path${norm} added to ${green}$prj_list${norm}" # ? test to exists?
	# shift loop
	# if $prj_name == "" then folder
	# if $path == "" then pwd
	# if $type == "" then git
	# if $remote == "" then current
	# if $set == "" then default
	}
cmd_project_delete(){		# pdel		<prj>
	#-n=<prj> -p=<path> -s=<set>
	# alias pcfg='cmd_cfg' ???
	# pcfg <option>=<value>
	# pcfg --switch_default_prj_list=<prj_list>
	# pcfg --default_project=<prj>

	# shift loop
	# if $path == "" then pwd
	# if $prj == "" then folder
	# if $set == "" then default

	# if path == $path then rm
	local prj_name="$1"
	#[[ "$prj_name" == "" ]] && echo -e "${red}[cmd_project_delete] prj_name param is missed !${norm}" && return 
	[ "$prj_name" == "" ] && prj_name=$(get_project_name "$(pwd)")
	[[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" ]] && echo -e "[cmd_project_delete] Project '${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name${norm}' not found !" && return 
	prj_path=`sed -E -n 's/^path=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
	#prj_type=`sed -E -n 's/^type=([^#]+).*/\1/p' $UTILS_ PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
	#prj_remote=`sed -E -n 's/^remote=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
	rm "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" || return
	local current_set="$(get_current_set).list"
	sed -i $UTILS_PRJ_SED_BACKUP -E "/^$prj_name$/d" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$current_set" && echo -e "[cmd_project_delete] Project ${yellow}$prj_name - $prj_path${norm} is deleted from ${yellow}$current_set${norm}" 
	}
cmd_project_move(){		# pmove		<prj>|. 	[<list>]
	# if list is skipped and prj_name is same 					-> update prj path
	# if list is skipped and prj_name is different from stored (find by path) 	-> upd name of prj (name and link in list)
	# if prj_name is same and list is different 					-> cut prj from current list and paste to pointed list

	local prj_name="$1"
	local prj_list="$2"
	#[[ "$prj_name" == "" ]] && echo -e "${red}[PROJECT MOVE] Project name is missed !${norm}" && return

	#new_path=$(pwd) #; echo new_path: $new_path
	local curr_path="${PWD/#$HOME/~}" # replace $HOME to ~

	# TODO: detect repo type (git/svn/hg - .git foder / .svn folder? / ..) and return if new_path not a repo 

	if [ "$prj_list" == "" ]; then
		local prj_list="$(get_current_set).list"
		local project_name=$(get_project_name); trace_prj "project_name:\t$project_name"
		[ "$project_name" == "" ] && echo -e "${red}Project not found by '$curr_path'${norm}" && return
		if [ "$project_name" == "$prj_name" ]; then
			# update prj path
			sed -i $UTILS_PRJ_SED_BACKUP -E "s/^(path=)(.*)/\1${curr_path//\//\\/}/g" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" || return #  replace home path
		  else
			# upd name of prj (name and link in list)
			[ -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" ] && echo -e "${red}Project '$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name' already exist ${norm}"
			local found=$(grep "^$project_name$" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list")
			trace_prj "found:\t$found"
			[ "$found" != "$project_name" ] && echo -e "${red}Project '$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name' not found in '$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list' ${norm}" && return
			mv "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$project_name" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" || return
			sed -i $UTILS_PRJ_SED_BACKUP -E "s/^$project_name$/$prj_name/g" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list" || return
		  fi
	  else
		# cut prj from current list and paste to pointed list
		[ "$prj_name" == "." ] && prj_name=$(get_project_name); trace_prj "prj_name:\t$prj_name"
		local current_set=$(get_current_set); trace_prj "current_set:\t$current_set"
		[[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list" ]] && echo -e "${red}[cmd_project_move] Project list '$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list' not found !${norm}" && return
		[ "$prj_list" == "$current_set" ] &&echo -e "${red}[cmd_project_move] Target project list '$prj_list.list' can't be current !${norm}" && return
		echo "$prj_name" >> "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list"
		echo -e "[cmd_project_move] Project ${green}$prj_name${norm} added to ${green}'$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list.list'${norm}" 
		sed -i $UTILS_PRJ_SED_BACKUP -E "/^$prj_name$/d" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$current_set.list" || return
		echo -e "[cmd_project_move] Project ${yellow}$prj_name${norm} cut from ${yellow}'$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$current_set.list'${norm}" 
		[ "$(grep "^$prj_name$" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$current_set.list")" != "" ] && echo -e "${red}Project '$prj_name' still found in '$prj_list' ${norm}" && return
	  fi
	cmd_project_enum # plist
	}
cmd_project_rename(){		# pren 		<prj>
	# pren <prj> [<list>]  - rename prj name (alias) (find prj by curr_path)
	# pren -n=<prj> -p=<path> -t=<type> -r=<remote> -s=<set>

	cmd_project_enum # plist
	#TRACE=0
	new_prj_name=$1
	[[ "$new_prj_name" == "" ]] && echo -e "${red}[cmd_project_rename] Project name not found !${norm}" && return
	#list=$2

	#new_path=$(pwd) #; echo new_path: $new_path
	curr_path="${PWD/#$HOME/~}" # replace $HOME to ~

	# TODO: detect repo type (git/svn/hg - .git foder / .svn folder? / ..) and return if new_path not a repo 

	#trace_prj "UTILS_PRJ_HOME:\t$UTILS_PRJ_HOME" 
	#trace_prj "UTILS_PRJ_THE_HOST: $UTILS_PRJ_THE_HOST"

	if [[ "$list" == "" ]]; then
		prj_list=$(get_current_set).list 
	  else
	  	prj_list="$list.list"
	  fi
	trace_prj"prj_list:\t$prj_list"
	# TODO: test prj in list
	#return
	curr_path=`eval echo $curr_path` # replace '~'' -> $HOME

	curr_prj_name=$(get_project_name $curr_path $TRACE) ; trace_prj "curr_prj_name:\t$curr_prj_name"	 #old prj name
	[[ "$curr_prj_name" == "" ]] && echo -e "${red}[cmd_project_rename] Project file not found !${norm}" && return
	  #prj_path=`sed -E -n 's/^path=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$new_prj_name | tr -d '\r'` #; echo curr_path: $prj_path
	#echo sed -i "s/^$curr_prj_name\$/$new_prj_name/g" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list" ; return
	mv "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$curr_prj_name" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$new_prj_name" || return

	sed -i $UTILS_PRJ_SED_BACKUP -E "s/^$curr_prj_name\$/$new_prj_name/g" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list" || return 
	
	#echo "path=$new_path" 	>  $prj_path
	#echo "type=git" 	>> $prj_file
	#echo "remote=" 		>> $prj_file

	cmd_project_enum

	# TODO: if file exists but absent in default list then add

	# shift loop
	# if $new_prj_name == "" then folder
	# if $path == "" then pwd
	# if $type == "" then git
	# if $remote == "" then current
	# if $set == "" then default
	}

cmd_set_enum(){			# psets
	#echo -e "\n${grey_back}          project sets          ${norm}"

	local find_path="find" # linux/osx
	[[ "$TERM" == "cygwin" ]] && find_path="$(cygpath-m "$EXEPATH")/usr/bin/find" # in windows $EXEPATH ex. C:\app\git - std env by git bash
	trace_prj "find_path:\t$find_path [cmd_set_enum]" 1>&2
	local set_default=$(get_current_set)
	(
	cd "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"
	local prj_list
	for prj_list in $($find_path . -maxdepth 1 -type f -name "*.list" -exec  basename "{}" ';' ); do
		#prj_list=`echo $prj_list` #normalize (cut <CR>)
		#path=`sed -E -n 's/^path=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_list | tr -d '\r'` 
		# prj_list=${prj_list:2}
		prj_list="${prj_list/.list/}"
		[ "$prj_list" == "$set_default" ] && prj_list="${green}$prj_list ${grey}(current)${norm}"
		echo -e "$prj_list"
		#cmd_enum_projects "$prj_list"
	  done
	)
	echo
	}
cmd_set_add() {			# psetadd	<set>
	local set_name="$1"
	[[ "$set_name" == "" ]] && echo -e "${red}[cmd_set_add] set_name param is missed !${norm}" && return 
	[[ -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list" ]] && echo -e "[cmd_set_add] Project list '${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name/$set_name.list${norm}' already exists !" && return 
	touch "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list"
	[ -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list" ] && echo -e "[cmd_set_add] Project list '${green}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list${norm}' is added" 
	}
cmd_set_delete() {		# psetdel	<set>
	local set_name="$1"
	[[ "$set_name" == "" ]] && echo -e "${red}[cmd_set_delete] set_name param is missed !${norm}" && return 
	[[ "$set_name" == "$(get_current_set)" ]] && echo -e "${red}[cmd_set_delete] You can't delete default list !${norm}" && return 
	[[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list" ]] && echo -e "[cmd_set_delete] Project list '${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list${norm}' not found !" && return 
	local prj_name
	for prj_name in $(cat $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list | sed -e /^$/d | tr -d '\r' | sort); do 
		prj_name=`eval echo $prj_name`; trace_prj "prj_name:\t$prj_name" # normalize (<CR> ~)
		prj_path=`sed -E -n 's/^path=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
		#prj_type=`sed -E -n 's/^type=([^#]+).*/\1/p' $UTILS_ PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
		#prj_remote=`sed -E -n 's/^remote=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name | tr -d '\r'`
		# echo "delete alias $prj_name:\t$prj_path"
		[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" ] && echo -e "[cmd_set_delete] Project ${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name${norm} not found " && continue
		rm "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name" && echo -e "[cmd_set_delete] Project ${yellow}$prj_name${norm} for ${yellow}$prj_path${norm} is deleted" 
		# -f  ignore non-existent files, never prompt
		# -r  remove directories and their contents recursively
		# -v  explain what is being done
		# -i  prompt you on every deletion.
	  done
	rm "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list" && echo -e "[cmd_set_delete] Project list ${yellow}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list${norm} is deleted" 
	}
cmd_set_rename() {		# psetren
	# verify or define by path
	# rename file
	# replace if default
	local set_name="$1"
	local extra="$2"
	[[ "$extra" != "" ]] && echo -e "${red}[cmd_set_rename] extra param's is not valid !${norm}" && return 
	[[ "$set_name" == "" ]] && echo -e "${red}[cmd_set_rename] set_name param is missed !${norm}" && return 
	local set_name_current="$(get_current_set)"; trace_prj "set_name_current:\t$set_name_current" # normalize (<CR> ~)
	[[ "$set_name_current" == "" ]] && echo -e "${red}[cmd_set_rename] Project list '$set_name' not found !${norm}" && return 
	[[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name_current.list" ]] && echo -e "${red}[cmd_set_rename] Project list ${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name_current.listnot found !${norm}" && return 
	[ -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list" ] && echo -e "${red}[cmd_set_rename] Project list ${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list already exist !${norm}" && return 
	eval mv "'$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name_current.list'" "'$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list'" || return
	sed -i $UTILS_PRJ_SED_BACKUP -E "s/^(default_list=)(.*)/\1$set_name/g" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/default" && echo -e "[cmd_set_rename] Current project list now is ${green}$set_name${norm}" 
	}
cmd_set_switch() {		# psetsw	<list>|.  			# set as default
	local set_name="$1"
	[ "$set_name" == "" ] && echo -e "${red}[cmd_set_switch] set_name param is missed !${norm}" && return 
	[ ! -f "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list" ] && echo -e "${red}[cmd_set_switch] Project list ${red}$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$set_name.list not found !${norm}" && return 
	sed -i $UTILS_PRJ_SED_BACKUP -E "s/^(default_list=)(.*)/\1$set_name/g" "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/default" && echo -e "[cmd_set_switch] Current project list is ${green}$set_name${norm} now"
	}

# == data sync ===
cmd_project_sync(){
	local prj_name="$1"
	local prj_path="$2"
	local cmd="$3"
	local msg="$4"
	trace_prj "prj_name:\t[cmd_project_sync] $prj_name"
	trace_prj "prj_path:\t[cmd_project_sync] $prj_path"
	trace_prj "cmd/msg:\t[cmd_project_sync] $cmd/$msg"

	[ ! -d "$prj_path" ] && echo -e "${red}[cmd_project_sync] Project home path '$prj_path' not found !${norm} " && return
	( # to return current path
	# TODO: get prj vcs_type (svn, git)
	#echo -e "${grey_back} $prj_list  $prj \t $prj_path ${norm}"
	echo -e "${grey_back} $prj_name  -  $prj_path ${norm}"  
#echo -e "${grey_back} $prj_list  $prj \t $prj_path ${norm}"
	eval cd "$prj_path"

	#local gis=$(git status -s --untracked-files)
	changes=$(git status -s --untracked-files | wc -l) 
	trace_prj "changes:\t$changes"
	case "$cmd" in
		"local"|"remote")
			# state
			git status -s --untracked-files # "$*" - mask  echo "$gis" #

			#echo -e -n "Ask ${yellow}$cmd${norm} for last commit .. "  #[ "$remote_mode" = "remote" ] && 
			local sync_status=$(get_sync_status "$cmd" notice) # notice/silent NO_TRACE
			#[ "$sync_status" == "ok" ] && echo -e "${green}same${norm}"
			#[[ "$sync_status" = "remote" && "$sync_status" == "ok" ]] && echo -e "${green}same${norm}"
			trace_prj "sync_status:\t$sync_status"
			# [ "$compare_status" == "diverged" ] && echo -e "${red_bright}DIVERGED ! NEED TO PUSH AFTER ${norm}" # 
	  		;;
		"fix")
			[ "$changes" != "0" ] && echo -e "${red}FIXING${norm}" && git status -s --untracked-files && gac "$msg" && return
			echo -e "${yellow}Changes not found ${norm}" 
			;;
		"pull")
			echo -e "${red}GETTING${norm} $prj_name: $prj_path"
			gul
			;;
		"push")
			[ "$changes" != "0" ] && echo -e "${red}FIXING${norm}" && git status -s --untracked-files && gac "$msg" && echo 
			#echo -e "${red}PUSHING${norm}"
			gus #gok "$msg"
			;;
		"full")
			[ "$changes" != "0" ] && gac "$msg" && echo # fix prj when need (add/commit) 

			#echo -n "Ask remote for last commit .. " 
			local sync_status=$(get_sync_status remote notice) # notice/silent NO_TRACE
			trace_prj "sync_status:\t$sync_status"
			#sync_status=`eval echo $sync_status`
			[[ "$sync_status" == "pull" || "$sync_status" == "diverged" ]] && gul # pull when need
			[[ "$sync_status" == "push" || "$sync_status" == "diverged" ]] && gus # push when need
			;;
		*)
			echo -e "${red}[cmd_project_sync] Project command '$cmd' not found !${norm} " && return
	  esac
	)
	echo
	}
cmd_project_action(){		# prs <sync_type> .|<prj>|<list> [<msg>]
	# sync_type: state(local) statex(remote) pull push full	'.' for current prj  '..' for current list
	#cmd_state_of_projects(){	# psp[x] .|<prj>|<list> 
	# todo: unite cmd_state_of_all_projects  cmd_state_of_projects
	# todo: unite with cmd_save_all_project_at_local
	# todo: unite with cmd_pull_all_projects
	# todo: make sync
	local cmd="$1"
	local obj="$2" # prj_or_list
	local msg="$3"
	trace_prj "cmd:\t\t$cmd"
	trace_prj "obj:\t\t$obj"
	#[ "$cmd" == "" ] && echo "${red}[cmd_project_action] Param 'sync_type' is missed ${norm}" 
	# [cmd_project_action]  "$cmd" == "" || !  <sync_type>
	[[ "$obj" == "" || ! ("$cmd" == "local" || "$cmd" == "remote" || "$cmd" == "fix" || "$cmd" == "pull" || "$cmd" == "push" || "$cmd" == "full") ]] && \
		echo -e "Syntax: ${green}<command>${norm} ${yellow} <object> [<msg>]${norm}" && \
		echo -e "\t\t${green}<command>${norm}\tdefault aliases are - pst[x], pstate[x], pfix[all], pget[all], psave[all], psync[all]" && \
		#echo -e "\t${yellow}<sync_type>${norm}:\t\tlocal | remote | fix | pull | push | full" && \
		echo -e "\t\t${yellow}<object>${norm}\t'.' means current project | name of project | '..' means current list | name of list" && \
		echo -e "\t\t${yellow}<msg>]${norm}\t\tfor commit" && \
		return

	#[ "$obj" == "" ] && obj="."
	#local objtype="project"
	[[ "$obj" != "." && "$obj" != ".." ]] && objtype=$(get_object_type $obj NO_TRACE) # 
	local obj_orig="$obj"
	[ "$obj" == "." ] && obj=$(get_project_name "$(pwd)") && objtype="project"
	[ "$obj" == ".." ] && obj=$(get_current_set) && objtype="set"

	trace_prj "objtype:\t$objtype"
	trace_prj "obj(2):\t\t$obj"
	[ "$objtype" == "" ] && echo -e "${red}[cmd_project_action] Object type not found for '$obj' !${norm}" && return
	[ "$obj" == "" ] && echo "[cmd_project_action] $objtype not found by 'current path' in $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST !" && return
	# todo: multiple list for one prj
	#[[ ! -d "$prj_path_norm" ]] && echo -e "${red}[SAVE PROJECT] project path '$prj_path_norm' not found !${norm}" && return

	local prj_path
	if [ "$objtype" == "project" ]; then
		echo
		#if [ "$cmd" == "local" ]; then
		if [ "$obj_orig" == "." ]; then 
			prj_path=`eval echo $(pwd)`
		  else
			prj_path=$(get_project_path $obj) #"$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"    NO_TRACE
		  fi
		[ "$prj_path" != "" ] && cmd_project_sync "$obj" "$prj_path" "$cmd" "$msg"
		return
		#  fi
	  fi
	if [ "$objtype" == "set" ]; then
		#if [ "$cmd" == "local" ]; then
		echo
		for prj_name in $(cat $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$obj.list | sed -e /^$/d | tr -d '\r' | sort); do 
			#prj_name=`echo $prj_name` # normalize
			trace_prj "prj_name:\t$prj_name"
			prj_path=$(get_project_path "$prj_name") #"$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"    dont_TRACE NO_TRACE
			[ "$prj_path" == "" ] && continue
			trace_prj "prj_path:\t$prj_path"
			cmd_project_sync "$prj_name" "$prj_path" "$cmd" "$msg" || return #$prj_path  [ "$prj_path" != "" ] && 
		  done
	  fi
	}

# === navigate and exec ===
cmd_project_go(){		# pgo 	<prj> [<list>?] # dubl aliases?
	# pgo <project> 
	#TRACE=0
	[ $SHLVL -gt 1 ] && echo "[cmd_project_go] Subshell can't change path after return ! CORRECT USE: '. pgo <project>'" 1>&2 && return
	#if expr match $parent $(which vim) > /dev/null

	project="$1" # test 1st param - prj name
	[[ "$project" == "" ]] && echo -e "${red}[cmd_project_go] project name is missed !${norm}"

	#trace_prj "UTILS_PRJ_HOME:\t$UTILS_PRJ_HOME"
	#trace_prj "UTILS_PRJ_THE_HOST: $UTILS_PRJ_THE_HOST"
		# repos=$1; repos=$(get_current_set $repos) # echo repos: $repos
	#echo path: "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST" 
	#get_project_name_verified "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST" $project
	prj_path=$(get_project_path $project) #_verified
	trace_prj "prj_path:\t$prj_path" # "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST" 
	[[ "$prj_path" == "" ]] && echo -e "${yellow}[cmd_project_go] project ${red}'$trace_prj'${yellow} not found !${norm}" && return
	# extract path of repo
	#project_path="$(sed -E -n 's/^path=([^#]*)/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_repo | tr -d '\r')" 
	#trace_prj "project_path:\t$project_path"

	echo "go to: $prj_path"
	# ??TODO: test $path exists
	eval cd "$prj_path"
	[ "$ConEmuPID" != "" ] && $ConEmuBaseDir/ConEmuC -GuiMacro Rename 0 "${PWD##*/}" 1> /dev/null
	[ "$TERM_PROGRAM" == "Apple_Terminal" ] && echo -ne "\033]0;${PWD##*/}\007"
	}
cmd_project_exec(){		# pcmd <prj> <cmd>
	local prj_name="$1"
	local prj_cmd="$2"
	#[ "$TRACE" == "" ] && local TRACE=0 #$3
	
	#[[ "$prj_cmd" == "default" ]] && prj_list=$(get_current_set)
	[ "$prj_cmd" == "" ] && echo -e "[cmd_project_exec] Syntax: ${green}pcmd ${yellow}<prj> <cmd>${norm}, ex.: pcmd my_prj 'ls'" && return 
	local prj_path=$(get_project_path "$prj_name" NO_TRACE)
	[ "$prj_path" == "" ] && echo -e "${red}[cmd_project_exec] Project $prj_name not found${norm}" && return
	(
	cd "$prj_path"
	eval "$prj_cmd"
	)
	}


# === service functions ===
get_current_set () {
	#local project_list=$1
	#if [[ "$project_list" == "" ]]; then
		local project_list="$(sed -E -n 's/^default_list=([^#]*)/\1/p' "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/default" | tr -d '\r')"
	# fi
	echo "$project_list" # return value
	}
get_project_name () {		# <project_path>
	# to test - bp; TRACE=1;get_project_name "/c/app/utils-env"
	local project_path="$1" 
	[ "$2" != "" ] && local TRACE=$2
	#trace_prj "root:\t\t$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST" 1>&2 # local root=$1; 
	#trace_prj "project_path:\t$project_path [get_project_name]" 1>&2
	#[[ "$root" == "" ]] && echo "[LIB: FIND PROJECT BY PATH] root for project is missed !" 1>&2 && return
	[[ "$project_path" == "" ]] && echo -e "${red}[get_project_name] parma 'project_path' is missed !${norm}" 1>&2 && return # project_path=$(pwd)
	trace_prj "project_path:\t[get_project_name] $project_path" 1>&2
		#echo "[get_project_name] project_path is missed !" 1>&2 && return
	
	(
	cd "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST" #[ $TRACE -eq 1 ] &&  pwd 
	find_path="find"
	[[ "$TERM" == "cygwin" ]] && find_path="$(cygpath-m "$EXEPATH")/usr/bin/find"
	trace_prj "find_path:\t[get_project_name] $find_path" 1>&2
	for prj_loop in $($find_path . -maxdepth 1 -type f ! -name "*.*" -a ! -name default -exec basename "{}" ';'); do # all files w/o extensions | sed 's/^\.\///'
		trace_prj "prj_loop:\t[get_project_name] $prj_loop" 1>&2
		looped_path=`eval echo $(sed -E -n 's/^path=([^#]+).*/\1/p' $UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_loop | tr -d '\r')` 
		trace_prj "looped_path:\t[get_project_name] $looped_path" 1>&2
		if [[ "$project_path" == "$looped_path" ]]; then
			echo $prj_loop
			return
		  fi
	  done
	)
  }
get_project_path () {		# <prj>
	local prj_name="$1"
	[ "$2" != "" ] && local TRACE="$2"
	local extra=$3
	[ "$extra" != "" ] && echo "[get_project_path] extra param is invalid!" 1>&2 && (trace_prj "extra:\t[get_project_path] $extra" 1>&2) && return 
	#[[ "$root" == "" ]] && echo "[LIB: FIND PROJECT PATH] root for project is missed !" 1>&2 && return ; trace_prj "root:\t\t$root [get_project_path]" 1>&2
	[[ "$prj_name" == "" ]] && echo "[get_project_path] project name is missed !" 1>&2 && (trace_prj "prj_name:\t\t[get_project_path] $prj_name" 1>&2) && return
	
	#(	cd "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"
		#local find_path="find"
		#[[ "$TERM" == "cygwin" ]] && find_path="$(cygpath-m "$EXEPATH")/usr/bin/find"
		#trace_prj "find_path:\t[get_project_path] $find_path" 1>&2

	local prj_file="$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST/$prj_name"
	[ ! -f "$prj_file" ] && echo -e "${red} Project file '$prj_file' not found !${norm}" 1>&2 && return
		#for prj_loop in $($find_path . -maxdepth 1 -type f ! -name "*.*" -a ! -name default -exec basename "{}" ';'); do  #| tr -d '\r' | sed 's/^\.\///' 
		#	trace_prj "prj_loop:\t[get_project_path] $prj_loop" 1>&2
		#	if [[ "$prj_name" == "$prj_loop" ]]; then
				local prj_path=`eval echo $(sed -E -n 's/^path=([^# ]+).*/\1/p' $prj_file | tr -d '\r')` # remove tilda for home path's
				echo $prj_path
		#		return
		#	  fi
		#  done
	#)
  }
get_sync_status(){		# <remote_mode>
	# ex. get_sync_status true # to compare with last commit from remote host
	# ??todo: return two out param ???  array?  or  pull/push/both/diverged only?
	local use_remote_host="$1"  	# true / false
	local result_format="$2" 		# when 'silent' then print yes/no else print msg for user 
	[ "$3" != "" ] && local TRACE=$3

	[ "$use_remote_host" == "" ] && use_remote_host=local
	[ "$result_format" == "" ] && result_format=notice

	trace_prj "use_remote_host: [get_sync_status] $use_remote_host" 1>&2
	trace_prj "result_format:\t[get_sync_status] $result_format" 1>&2

	[[ "$result_format" == "notice" && "$use_remote_host" == "local" ]] && echo -e -n "Ask ${yellow}$use_remote_host${norm} for last commit .. " 1>&2
	[[ "$result_format" == "notice" && "$use_remote_host" == "remote" ]] && echo -e -n "Ask ${green}$use_remote_host${norm} for last commit .. " 1>&2

	#trace_prj $([ "$result_format" != "silent" ] && echo "notice mode [get_sync_status]") 1>&2
	local status
	local LOCAL=$(git rev-parse @)
	if [[ "$use_remote_host" == "true" ]]; then
		local REMOTE=$(git ls-remote 2>/dev/null | awk "/HEAD/ {print \$1}") # from remote host
	  else
		local REMOTE=$(git rev-parse @{u}) # last pulled head of remote
	  fi
	local BASE=$(git merge-base @ @{u})
	#echo LOCAL:$LOCAL REMOTE:$REMOTE BASE:$BASE
	if [ $LOCAL = $REMOTE ]; then 		status="ok" # same
	  elif [ $LOCAL = $BASE ]; then		status="pull"
	  elif [ $REMOTE = $BASE ]; then	status="push"
	  else				  	status="diverged"
	  fi

	local changes=$(git status -s --untracked-files | wc -l) 
	if [ "$result_format" == "notice" ]; then
		[[ "$status" == "ok" && "$changes" != 0 ]] 	&& echo -e "${yellow}NEED TO COMMIT AND PUSH${norm}" 1>&2
		[[ "$status" == "ok" && "$changes" == 0 ]]	&& echo -e "${green}same${norm}" 1>&2
		[ "$status" == "pull" ] 			&& echo -e "${yellow}NEED TO PULL !${norm}" 1>&2
		[ "$status" == "push" ] 			&& echo -e "${green}NEED TO PUSH${norm}" 1>&2
		[ "$status" == "diverged" ] 			&& echo -e "${red_bright}DIVERGED !!${norm}" 1>&2 # ! NEED TO PUSH AFTER
	  fi
	trace_prj "status:\t\t[get_sync_status] $status" 1>&2
	trace_prj "changes:\t[get_sync_status] $changes" 1>&2
	echo "$status" # for extra handle
	}
get_object_type(){		# <prj|list>
	local obj=$1  	# project_or_list
	[ "$2" == "NO_TRACE" ] && local TRACE=0 # true / false
	[ "$obj" == "" ] && echo -e "${red}[get_object_type] param 'obj' is missed !${norm}" 1>&2 && return 

	local find_path="find" # linux/osx
	[[ "$TERM" == "cygwin" ]] && find_path="$(cygpath-m "$EXEPATH")/usr/bin/find" # in windows $EXEPATH ex. C:\app\git - std env by git bash
	trace_prj "find_path:\t[get_object_type] $find_path" 1>&2

	(
	cd "$UTILS_PRJ_CONFIGS/$UTILS_PRJ_THE_HOST"
	local fname
	for fname in $($find_path . -maxdepth 1 -type f ! -name default -exec basename "{}" ';'); do
		#fname=`echo $fname` #normalize (cut <CR>)
		local base="${fname%.[^.]*}" # Strip shortest match of . plus at least one non-dot char from end
		local ext="${fname:${#base} + 1}" # Substring from len of base thru end
		trace_prj "fname parse:\t[get_object_type] $base - $ext" 1>&2
		if [ "$base" == "$obj" ]; then
			if [ "$extension" == "list" ]; then
				echo "set"
			  else
				echo "project"
			  fi
			return
		  fi
	  done
	)
	}

